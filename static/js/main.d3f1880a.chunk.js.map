{"version":3,"sources":["components/flag/tick.svg","home/images/demo.gif","home/images/sloth.png","images/leaves.png","components/flag/styles.tsx","components/flag/view.tsx","components/flag/index.tsx","components/code-block/styles.tsx","components/code-block/index.tsx","components/code-block/view.tsx","home/styles.tsx","home/index.tsx","home/view.tsx","styles.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["module","exports","FlagTypes","FlagWrapper","styled","div","props","type","INFO","WARNING","ERROR","TitleContainer","Icon","span","src","Title","h2","Description","p","Flag","this","title","description","tick","React","Component","Container","clipboard","Pre","pre","LineNo","CodeBlock","copyToClipboard","text","dummy","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","onClick","setState","isFlagHidden","setTimeout","renderFlag","state","language","code","prismDefaultProps","theme","nightOwlTheme","className","style","tokens","getLineProps","getTokenProps","map","line","i","key","token","j","Heading1","h1","Heading2","GitHubButtonContainer","Image","img","Copyright","Home","getInstallWithNPMCode","getInstallWithYarnCode","getExampleScriptCode","npmInstallCode","yarnInstallCode","href","data-icon","data-size","aria-label","sloth","alt","demo","size","bannerColor","GlobalStyle","createGlobalStyle","AppContainer","App","leaves","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3f1880a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick.4b93446c.svg\";","module.exports = __webpack_public_path__ + \"static/media/demo.10a123c4.gif\";","module.exports = __webpack_public_path__ + \"static/media/sloth.ca47ce7b.png\";","module.exports = __webpack_public_path__ + \"static/media/leaves.ad628077.png\";","import styled from 'styled-components';\nimport { FlagTypes } from './view';\n\nexport interface FlagProps {\n  type: FlagTypes;\n}\n\nexport const FlagWrapper = styled.div`\n  @-webkit-keyframes fadeinout {\n    0% {\n      opacity: 0;\n    }\n    25% {\n      opacity: 1;\n    }\n    75% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n\n  @keyframes fadeinout {\n    0% {\n      opacity: 0;\n    }\n    25% {\n      opacity: 1;\n    }\n    75% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n\n  position: fixed;\n  bottom: 30px;\n  left: 30px;\n  @media only screen and (max-width: 760px),\n    (min-device-width: 768px) and (max-device-width: 1024px) {\n    text-align: center;\n    left: 10px;\n    right: 10px;\n    top: 10px;\n    bottom: unset;\n    z-index: 1001;\n  }\n  padding: 0 10px;\n  border-radius: 6px;\n  border: 2px solid\n    ${(props: FlagProps) => {\n      const { type } = props;\n      switch (type) {\n        case FlagTypes.INFO:\n          return 'rgba(128, 190, 102, 0.7)';\n        case FlagTypes.WARNING:\n          return 'yellow';\n        case FlagTypes.ERROR:\n          return 'crimson';\n        default:\n          return 'rgba(128, 190, 102, 0.7)';\n      }\n    }};\n  background: ${(props: FlagProps) => {\n    const { type } = props;\n    switch (type) {\n      case FlagTypes.INFO:\n        return 'rgb(191, 253, 151)';\n      case FlagTypes.WARNING:\n        return 'yellow';\n      case FlagTypes.ERROR:\n        return 'crimson';\n      default:\n        return 'rgb(191, 253, 151)';\n    }\n  }};\n  text-align: left;\n  opacity: 0;\n  -webkit-animation: fadeinout 3s linear forwards;\n  animation: fadeinout 3s linear forwards;\n`;\n\nexport const TitleContainer = styled.div``;\n\nexport interface IconProps {\n  src: string;\n}\n\nexport const Icon = styled.span`\n  display: inline-block;\n  height: 20px;\n  width: 20px;\n  margin-right: 10px;\n  background-size: contain;\n  background-image: url('${(props: IconProps) => props.src}');\n`;\n\nexport const Title = styled.h2`\n  display: inline-block;\n  margin-bottom: 0;\n`;\n\nexport const Description = styled.p``;\n","import React from 'react';\n\nimport {\n  Description,\n  FlagWrapper,\n  Icon,\n  Title,\n  TitleContainer\n} from './styles';\nimport tick from './tick.svg';\n\nexport enum FlagTypes {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error'\n}\n\nexport interface Props {\n  type: FlagTypes;\n  title: string;\n  description: string | React.ElementType;\n}\n\nclass Flag extends React.Component<Props> {\n  public render() {\n    const { title, description, type } = this.props;\n    return (\n      <FlagWrapper type={type}>\n        <TitleContainer>\n          <Icon src={tick} />\n          <Title>{title}</Title>\n        </TitleContainer>\n        <Description>{description}</Description>\n      </FlagWrapper>\n    );\n  }\n}\n\nexport default Flag;\n","import { default as Flag } from './view';\nexport default Flag;\n","import styled from 'styled-components';\n\nexport interface ContainerProps {\n  clipboard?: string;\n}\n\nexport const Container = styled.div<ContainerProps>`\n  font-family: sans-serif;\n  display: table;\n  @media only screen and (max-width: 760px),\n    (min-device-width: 768px) and (max-device-width: 1024px) {\n    display: block;\n  }\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  cursor: ${(props: ContainerProps) => (props.clipboard ? 'copy' : 'inherit')};\n  max-width: 96%;\n`;\n\nexport const Pre = styled.pre`\n  text-align: left;\n  margin: 1em 0;\n  padding: 0.5em;\n  & .token-line {\n    line-height: 1.3em;\n    height: 1.3em;\n  }\n  overflow: scroll;\n`;\n\nexport const LineNo = styled.span`\n  display: inline-block;\n  width: 2em;\n  user-select: none;\n  opacity: 0.3;\n`;\n","import { default as CodeBlock } from './view';\nexport default CodeBlock;\n","import Highlight, {\n  defaultProps as prismDefaultProps,\n  Language\n} from 'prism-react-renderer';\n// tslint:disable-next-line:no-submodule-imports\nimport nightOwlTheme from 'prism-react-renderer/themes/nightOwl';\nimport React from 'react';\n\nimport Flag from '../flag';\nimport { FlagTypes } from '../flag/view';\nimport { Container, LineNo, Pre } from './styles';\n\nexport interface Props {\n  language: Language;\n  code: string;\n  clipboard?: string;\n}\n\nexport interface State {\n  isFlagHidden: boolean;\n}\n\nclass CodeBlock extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isFlagHidden: true\n    };\n  }\n\n  public copyToClipboard = (text: string) => {\n    const dummy = document.createElement('input');\n    document.body.appendChild(dummy);\n    dummy.setAttribute('value', text);\n    dummy.select();\n    document.execCommand('copy');\n    document.body.removeChild(dummy);\n  };\n\n  public onClick = () => {\n    const { clipboard } = this.props;\n    if (clipboard) {\n      this.copyToClipboard(clipboard);\n      this.setState({ isFlagHidden: false });\n      setTimeout(() => {\n        this.setState({ isFlagHidden: true });\n      }, 3000);\n    }\n  };\n\n  public renderFlag = () => {\n    const { clipboard } = this.props;\n    const title = 'Copied to clipboard';\n    const description = `Copied \"${clipboard}\" to the clipboard`;\n    return (\n      <Flag type={FlagTypes.INFO} title={title} description={description} />\n    );\n  };\n\n  public render() {\n    const { language, code, clipboard } = this.props;\n    const { isFlagHidden } = this.state;\n    return (\n      <Container clipboard={clipboard} onClick={this.onClick}>\n        <Highlight\n          {...prismDefaultProps}\n          theme={nightOwlTheme}\n          language={language}\n          code={code}\n        >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <Pre className={className} style={style}>\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line, key: i })}>\n                  <LineNo>{i + 1}</LineNo>\n                  {line.map((token, j) => (\n                    <span key={j} {...getTokenProps({ token, key: j })} />\n                  ))}\n                </div>\n              ))}\n            </Pre>\n          )}\n        </Highlight>\n        {isFlagHidden ? null : this.renderFlag()}\n      </Container>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import styled from 'styled-components';\n\nexport const Heading1 = styled.h1`\n  color: #7a61c1;\n  margin-top: 0;\n  padding-top: 20px;\n`;\n\nexport const Heading2 = styled.h2`\n  color: #8fd3da;\n`;\n\nexport const GitHubButtonContainer = styled.div`\n  margin-bottom: 20px;\n  span {\n    margin: 5px;\n    > a {\n      background: white;\n      border: 2px solid crimson;\n    }\n  }\n`;\n\nexport const Image = styled.img`\n  max-width: 96%;\n`;\n\nexport const Description = styled.p``;\n\nexport const Copyright = styled.p`\n  color: rgba(126, 126, 126, 0.6);\n  padding-bottom: 30px;\n  margin-bottom: 0;\n`;\n","import { default as Home } from './view';\nexport default Home;\n","import React from 'react';\nimport GitHubButton from 'react-github-btn';\nimport GithubCorner from 'react-github-corner';\n\nimport CodeBlock from '../components/code-block';\nimport demo from './images/demo.gif';\nimport sloth from './images/sloth.png';\nimport {\n  Copyright,\n  Description,\n  GitHubButtonContainer,\n  Heading1,\n  Heading2,\n  Image\n} from './styles';\n\nexport interface State {\n  npmInstallCode: string;\n  yarnInstallCode: string;\n}\n\nclass Home extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      npmInstallCode: 'npm install cbf -g',\n      yarnInstallCode: 'yarn global add cbf'\n    };\n  }\n\n  public getInstallWithNPMCode = () => {\n    return `$ npm install cbf -g`;\n  };\n\n  public getInstallWithYarnCode = () => {\n    return `$ yarn global add cbf`;\n  };\n\n  public getExampleScriptCode = () => {\n    return `---\nexample-project:\nmessage: \"Run, build or test example project?\"\ndirectory: \"~/projects/example\"\noptions:\n    run:\n        message: \"Running example project...\"\n        command: \"yarn start\"\n    build:\n        directory: \"~/projects/example/src\"\n        message: \"Building example project...\"\n        command: \"yarn install\"\n    test:\n        message: \"Run unit or integration tests?\"\n        options:\n            unit:\n                message: \"Running example project unit tests\"\n                command: \"yarn test:unit\"\n            integration:\n                message: \"Running example project integration tests\"\n                command: \"yarn test:integration\"`;\n  };\n\n  public render() {\n    const { npmInstallCode, yarnInstallCode } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <Heading1>CBF</Heading1>\n          <GitHubButtonContainer>\n            <GitHubButton\n              className=\"github-button\"\n              href=\"https://github.com/joshuatvernon/cbf\"\n              data-icon=\"octicon-star\"\n              data-size=\"large\"\n              aria-label=\"Star joshuatvernon/cbf on GitHub\"\n            >\n              Star\n            </GitHubButton>\n            <GitHubButton\n              href=\"https://github.com/joshuatvernon/cbf/subscription\"\n              data-icon=\"octicon-eye\"\n              data-size=\"large\"\n              aria-label=\"Watch joshuatvernon/cbf on GitHub\"\n            >\n              Watch\n            </GitHubButton>\n          </GitHubButtonContainer>\n          <Image src={sloth} className=\"logo\" alt=\"cbf logo\" />\n        </header>\n        <Description>\n          CBF is a simple CLI tool for developers who <i>can't be f#@!'d</i>{' '}\n          learning or remembering all the commands they have to run day to day\n          or just in a specific repo.\n        </Description>\n        <Heading2>Install</Heading2>\n        <CodeBlock\n          code={this.getInstallWithNPMCode()}\n          language={'bash'}\n          clipboard={npmInstallCode}\n        />\n        <Description>OR</Description>\n        <CodeBlock\n          code={this.getInstallWithYarnCode()}\n          language={'bash'}\n          clipboard={yarnInstallCode}\n        />\n        <Heading2>Demo</Heading2>\n        <Image src={demo} className=\"demo\" alt=\"cli demo\" />\n        <Heading2>Example</Heading2>\n        <CodeBlock code={this.getExampleScriptCode()} language={'yaml'} />\n        <Copyright>Copyright © Joshua Vernon 2019</Copyright>\n        <GithubCorner\n          href=\"https://github.com/joshuatvernon/cbf\"\n          size=\"140\"\n          bannerColor=\"crimson\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  @import-normalize;\n  @import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');\n  body {  \n    font-family: 'Roboto', sans-serif;\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport interface AppProps {\n  src: string;\n}\n\nexport const AppContainer = styled.div`\n  text-align: center;\n  background-image: url('${(props: AppProps) => props.src}');\n`;\n","import React from 'react';\n\nimport Home from './home';\nimport leaves from './images/leaves.png';\nimport { AppContainer, GlobalStyle } from './styles';\n\nconst App: React.FC = () => {\n  return (\n    <AppContainer src={leaves}>\n      <GlobalStyle />\n      <Home />\n    </AppContainer>\n  );\n};\n\nexport default App;\n","/* tslint:disable:no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}